name: Remote Git Pull on VPS

on:
  push

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check for .gsc files in .iwd files
      run: |
        echo "Checking for .gsc files in .iwd files..."
        iwd_files_with_gsc=()
        for iwd_file in $(find . -type f -name "*.iwd"); do
          if unzip -l "$iwd_file" | grep -q ".gsc"; then
            iwd_files_with_gsc+=("$iwd_file")
            echo "Found .gsc files in $iwd_file!"
          fi
        done
        if [ ${#iwd_files_with_gsc[@]} -ne 0 ]; then
          exit 1
        else
          echo "No .gsc files found."
        fi
        ls -la

    - name: Check if each .gsc file has a corresponding .iwd file
      run: |
        echo "Checking if each .gsc file has a corresponding .iwd file..."
        for gsc_file in $(find . -type f -name "*.gsc"); do
          iwd_file="${gsc_file%.gsc}.iwd"
          if [[ ! -f "$iwd_file" ]]; then
            echo "No corresponding .iwd file found for $gsc_file!"
            exit 1
          fi
        done
        echo "Each .gsc file has a corresponding .iwd file."

    - name: Check for forbidden content in .gsc files
      run: |
        echo "Checking for forbidden content in .gsc files..."
        forbidden_content=("file_unlink" "system" "exec")
        for gsc_file in $(find . -type f -name "*.gsc"); do
          for content in "${forbidden_content[@]}"; do
            if grep -q -F "$content" "$gsc_file"; then
              echo "Forbidden content '$content' found in $gsc_file!"
              exit 1
            fi
          done
        done
        echo "No forbidden content found in .gsc files."

    - name: Execute remote Git pull on VPS
      run: |
        echo "1/8: Setting up private key..."
        echo "${{ secrets.VPS_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
        echo "2/8: Connecting to VPS and deploying changes..."
        echo "VPS_USERNAME: ${{ vars.VPS_USERNAME }}"
        echo "VPS_ADDRESS: ${{ vars.VPS_ADDRESS }}"
        ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ vars.VPS_USERNAME }}@${{ vars.VPS_ADDRESS }} "\
          echo '3/8: Changing directory to VPS_DIRECTORY...' && \
          echo 'VPS_DIRECTORY: ${{ vars.VPS_DIRECTORY }}' && \
          cd ${{ vars.VPS_DIRECTORY }} && \
          echo '4/8: Checking git initialization and setting up remote...' && \
          (test -d .git || git init) && \
          (git remote | grep -q '^origin$' || git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}github.com/${GITHUB_REPOSITORY}.git) && \
          echo '6/8: Fetching latest changes...' && \
          git fetch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git && \
          echo '7/8: Resetting local branch to the exact commit...' && \
          echo 'github.sha: ${{ github.sha }}' && \
          git reset --hard ${{ github.sha }} && \
          git clean -f -d && \
          echo '8/8: Deployment complete!'"
        rm -f private_key
      env:
        PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}
