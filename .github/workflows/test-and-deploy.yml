name: Test and deploy

on:
  push

jobs:
  check-no-packaged-gsc-files:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check for .gsc files in .iwd files
      run: |
        echo "Checking for .gsc files in .iwd files..."
        found_gsc_files=false

        for iwd_file in src/iwds/*.iwd; do
          echo " - checking $iwd_file"
          gsc_files=$(unzip -l "$iwd_file" | grep ".gsc" | awk '{print $4}')
          if [ -n "$gsc_files" ]; then
            found_gsc_files=true
            gsc_files_list=$(echo "$gsc_files" | tr '\n' ',' | sed 's/,$//')
            echo "Error: Found $gsc_files_list in $iwd_file"
          fi
        done

        if [ "$found_gsc_files" = true ]; then
          exit 1
        else
          echo "No .gsc files found."
        fi

  each-gsc-has-corresponding-iwd:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check if each .gsc file has a corresponding .iwd file
      run: |
        echo "Checking if each .gsc file has a corresponding .iwd file..."
        not_found_corresponding_iwd=false

        for gsc_file in src/scripts/*.gsc; do
          iwd_file="src/iwds/$(basename "${gsc_file%.gsc}.iwd")"
          echo " - checking existance of $iwd_file for $gsc_file"
          if [[ ! -f "$iwd_file" ]]; then
              not_found_corresponding_iwd=true
              echo "Error: No corresponding $iwd_file file found for $gsc_file!"
          fi
        done

        if [ "$not_found_corresponding_iwd" = true ]; then
            exit 1
        else
            echo "Each .gsc file has a corresponding .iwd file."
        fi

  forbidden-content-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check for forbidden content in .gsc files
      run: |
        echo "Checking for forbidden content in .gsc files..."
        forbidden_content=("system" "file_link" "file_unlink" "file_exists" "FS_LoadDir" "scandir" "fopen" "fread" "fwrite" "fclose" "fsize" "fremove" "exec" "execute" "exec_async_create" "exec_async_create_nosave" "exec_async_checkdone" "memory_malloc" "memory_free" "memory_int_get" "memory_int_set" "memory_memset" "binarybuffer_new" "binarybuffer_free" "binarybuffer_seek" "binarybuffer_write" "binarybuffer_read" "Cmd_ExecuteString")
        for gsc_file in src/scripts/*.gsc; do
          echo " - checking $gsc_file"
          for content in "${forbidden_content[@]}"; do
            if grep -q -F "$content" "$gsc_file"; then
              echo "Error: Forbidden content '$content' found in $gsc_file!"
              exit 1
            fi
          done
        done
        echo "No forbidden content found in .gsc files."

  check-iwd-unzip:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check if all .iwd files can be successfully unzipped
      run: |
        echo "Checking if all .iwd files can be successfully unzipped..."
        unzip_failure=false

        for iwd_file in src/iwds/*.iwd; do
          echo " - attempting to unzip $iwd_file"
          unzip -tq "$iwd_file"
          if [ $? -ne 0 ]; then
            unzip_failure=true
            echo "Error: Failed to unzip $iwd_file!"
          fi
        done

        if [ "$unzip_failure" = true ]; then
          exit 1
        else
          echo "All .iwd files were successfully unzipped."
        fi

  deploy:
    needs: [check-no-packaged-gsc-files, each-gsc-has-corresponding-iwd, forbidden-content-check, check-iwd-unzip]
    if: github.ref == 'refs/heads/main'
    name: Deployment job
    uses: nl-squad/nl-cod2-workflows/.github/workflows/deploy.yml@main
    with:
      profile: default
      branch: main
    secrets: inherit

  build-000empty:
    needs: deploy
    name: Build 000empty.iwd
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Execute build-000empty.sh remotely
      run: |
        project_definition="project-definition.json"
        if [ ! -f $project_definition ]; then
            echo "Error: $project_definition doesn't exist. Please use mynl CLI tool from within NL directory."
            exit 1
        fi

        function extract_value_or_exit() {
          local key=$1
          local value=$(jq -r "$key" "$project_definition")

          if [ "$value" = "null" ]; then
              echo "Error: $key not found in the $project_definition file."
              exit 1
          fi

          echo "$value"
        }

        ###

        profile=${{ inputs.profile }}
        connection_address=$(extract_value_or_exit '.connection.address')
        connection_user=$(extract_value_or_exit '.connection.user')
        connection_key_path=~/private_key
        echo "Starting ~/cod2/library/build-000empty.sh, host: $connection_user@$connection_address"

        echo "${{ secrets.VPS_PRIVATE_KEY }}" > $connection_key_path
        chmod 600 $connection_key_path
        echo "Private key set up"

        ssh -i $connection_key_path -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $connection_user@$connection_address "\
          echo 'Executing ~/cod2/library/build-000empty.sh' && \
          ~/cod2/library/build-000empty.sh"

        rm -f $connection_key_path
      env:
        PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}